# Binary-tree
import java.util.Stack;
class Node {
    int data;
    Node left;
    Node right;
}

// insert the new node in tree 
// best case ..

class BinaryTree {
    public Node createNewNode(int k){
        Node value = new Node();
        value.data = k;
        value.left = null;
        value.right = null;
        return value;
}
public void Preorder(Node node) {
    if(node == null) {
        return;
    }
      Stack<Node> s = new Stack<Node>(); 
      while(node != null){
          s.push(node);
          
      while(s.size()>0) {
          Node t = s.pop();
          System.out.println(t.data + "");
          if(t.right != null) {
              s.push(t.right);
          }
             if(t.left != null){
                 s.push(t.left);
             }
              }
          }
}
public Node deleteTree(Node node) {
    if(node == null){
        return null;
    }
    node.left = deleteTree(node.left);
    node.right= deleteTree(node.right);
    System.out.println("Deleting node" + node.data);
    node = null;
    return node;
}

    public static void main(String[] args){
      BinaryTree a = new BinaryTree();
     Node root = a.createNewNode(2);
      root.left = a.createNewNode(7);
      root.right = a.createNewNode(5);
      root.left.left = a.createNewNode(2);
      root.left.right = a.createNewNode(6);
      root.left.right.left = a.createNewNode(5);
      root.left.right.right = a.createNewNode(11);
      root.right.right = a.createNewNode(9); 
       root.right.right.left = a.createNewNode(4);
     root = a.deleteTree(root);
      
    }
}

// output
Deleting node2
Deleting node5
Deleting node11
Deleting node6
Deleting node7
Deleting node4
Deleting node9
Deleting node5
Deleting node2
